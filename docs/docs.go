// Code generated by swaggo/swag. DO NOT EDIT.

package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "Invar Poyda"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/signin": {
            "post": {
                "description": "Авторизация пользователя с использованием email и пароля.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Вход пользователя",
                "parameters": [
                    {
                        "description": "Данные пользователя для входа",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.UserSignIn"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Токен авторизации",
                        "schema": {
                            "$ref": "#/definitions/view.TokenView"
                        }
                    },
                    "400": {
                        "description": "Некорректный запрос"
                    },
                    "401": {
                        "description": "Ошибка авторизации"
                    },
                    "422": {
                        "description": "Ошибка при обработке данных"
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера"
                    }
                }
            }
        },
        "/auth/signup": {
            "post": {
                "description": "Регистрация нового пользователя.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Регистрация пользователя",
                "parameters": [
                    {
                        "description": "Данные пользователя для регистрации",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.UserCreate"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Токен авторизации",
                        "schema": {
                            "$ref": "#/definitions/view.TokenView"
                        }
                    },
                    "400": {
                        "description": "Некорректный запрос"
                    },
                    "422": {
                        "description": "Ошибка при обработке данных"
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера"
                    }
                }
            }
        },
        "/users/email/{email}": {
            "get": {
                "security": [
                    {
                        "JwtAuth": []
                    }
                ],
                "description": "Получение информации о пользователе по его уникальному идентификатору.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Получение пользователя по Email",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Email пользователя",
                        "name": "email",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Данные пользователя",
                        "schema": {
                            "$ref": "#/definitions/view.UserView"
                        }
                    },
                    "400": {
                        "description": "Некорректный запрос"
                    },
                    "401": {
                        "description": "Неавторизованный запрос"
                    },
                    "404": {
                        "description": "Пользователь не найден"
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера"
                    }
                }
            }
        },
        "/users/id/{id}": {
            "get": {
                "security": [
                    {
                        "JwtAuth": []
                    }
                ],
                "description": "Получение информации о пользователе по его уникальному идентификатору.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Получение пользователя по ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Уникальный идентификатор пользователя (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Данные пользователя",
                        "schema": {
                            "$ref": "#/definitions/view.UserView"
                        }
                    },
                    "400": {
                        "description": "Некорректный запрос"
                    },
                    "401": {
                        "description": "Неавторизованный запрос"
                    },
                    "404": {
                        "description": "Пользователь не найден"
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера"
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "JwtAuth": []
                    }
                ],
                "description": "Обновление информации о пользователе по его уникальному идентификатору.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Обновление пользователя по ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Уникальный идентификатор пользователя (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Данные пользователя для обновления",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.UserCreate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Обновленные данные пользователя",
                        "schema": {
                            "$ref": "#/definitions/view.UserView"
                        }
                    },
                    "400": {
                        "description": "Некорректный запрос"
                    },
                    "401": {
                        "description": "Неавторизованный запрос"
                    },
                    "404": {
                        "description": "Пользователь не найден"
                    },
                    "422": {
                        "description": "Ошибка при обработке данных"
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера"
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "JwtAuth": []
                    }
                ],
                "description": "Удаление пользователя по его уникальному идентификатору.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Удаление пользователя по ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Уникальный идентификатор пользователя (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Пользователь успешно удален"
                    },
                    "400": {
                        "description": "Некорректный запрос"
                    },
                    "401": {
                        "description": "Неавторизованный запрос"
                    },
                    "404": {
                        "description": "Пользователь не найден"
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера"
                    }
                }
            }
        },
        "/users/me": {
            "get": {
                "security": [
                    {
                        "JwtAuth": []
                    }
                ],
                "description": "Получение пользователя по его уникальному идентификатору из JWT токена",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Получение пользователя по JWT токену",
                "responses": {
                    "200": {
                        "description": "Данные пользователя",
                        "schema": {
                            "$ref": "#/definitions/view.UserView"
                        }
                    },
                    "400": {
                        "description": "Некорректный запрос"
                    },
                    "401": {
                        "description": "Неавторизованный запрос"
                    },
                    "404": {
                        "description": "Пользователь не найден"
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера"
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "JwtAuth": []
                    }
                ],
                "description": "Обновление информации о пользователе по его уникальному идентификатору из JWT токена",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Обновление пользователя по JWT токену",
                "parameters": [
                    {
                        "description": "Данные пользователя для обновления",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.UserCreate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Обновленные данные пользователя",
                        "schema": {
                            "$ref": "#/definitions/view.UserView"
                        }
                    },
                    "400": {
                        "description": "Некорректный запрос"
                    },
                    "401": {
                        "description": "Неавторизованный запрос"
                    },
                    "404": {
                        "description": "Пользователь не найден"
                    },
                    "422": {
                        "description": "Ошибка при обработке данных"
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера"
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "JwtAuth": []
                    }
                ],
                "description": "Удаление пользователя по его уникальному идентификатору из JWT токена.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Удаление пользователя по JWT токену",
                "responses": {
                    "204": {
                        "description": "Пользователь успешно удален"
                    },
                    "400": {
                        "description": "Некорректный запрос"
                    },
                    "401": {
                        "description": "Неавторизованный запрос"
                    },
                    "404": {
                        "description": "Пользователь не найден"
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера"
                    }
                }
            }
        }
    },
    "definitions": {
        "entity.UserCreate": {
            "type": "object",
            "properties": {
                "age": {
                    "description": "Возраст",
                    "type": "integer"
                },
                "email": {
                    "description": "Электронная почта",
                    "type": "string"
                },
                "firstName": {
                    "description": "Имя",
                    "type": "string"
                },
                "lastName": {
                    "description": "Фамилия",
                    "type": "string"
                },
                "password": {
                    "description": "Пароль",
                    "type": "string"
                },
                "phone": {
                    "description": "Номер телефона",
                    "type": "string"
                },
                "secondName": {
                    "description": "Отчество",
                    "type": "string"
                }
            }
        },
        "entity.UserSignIn": {
            "type": "object",
            "properties": {
                "email": {
                    "description": "Электронная почта",
                    "type": "string"
                },
                "password": {
                    "description": "Пароль",
                    "type": "string"
                }
            }
        },
        "view.TokenView": {
            "type": "object",
            "properties": {
                "token": {
                    "description": "JWT токен",
                    "type": "string"
                }
            }
        },
        "view.UserView": {
            "type": "object",
            "properties": {
                "age": {
                    "description": "Возраст",
                    "type": "integer"
                },
                "email": {
                    "description": "Электронная почта",
                    "type": "string"
                },
                "id": {
                    "description": "ID",
                    "type": "string"
                },
                "name": {
                    "description": "Имя в формате ФИО",
                    "type": "string"
                },
                "phone": {
                    "description": "Номер мобильного телефона",
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "JwtAuth": {
            "description": "JWT Bearer токен для аутентификации",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "0.0.1",
	Host:             "localhost:8001",
	BasePath:         "/api/v0.0.1",
	Schemes:          []string{"http"},
	Title:            "Golang Test API",
	Description:      "API for Golang Test Project",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
