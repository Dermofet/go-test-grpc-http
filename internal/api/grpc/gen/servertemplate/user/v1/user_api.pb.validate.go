// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: servertemplate/user/v1/user_api.proto

package userv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetMeRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetMeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMeRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetMeRequestMultiError, or
// nil if none found.
func (m *GetMeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetMeRequestMultiError(errors)
	}

	return nil
}

// GetMeRequestMultiError is an error wrapping multiple validation errors
// returned by GetMeRequest.ValidateAll() if the designated constraints aren't met.
type GetMeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMeRequestMultiError) AllErrors() []error { return m }

// GetMeRequestValidationError is the validation error returned by
// GetMeRequest.Validate if the designated constraints aren't met.
type GetMeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMeRequestValidationError) ErrorName() string { return "GetMeRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetMeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMeRequestValidationError{}

// Validate checks the field values on GetMeResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetMeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMeResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetMeResponseMultiError, or
// nil if none found.
func (m *GetMeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetMeResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetMeResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetMeResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetMeResponseMultiError(errors)
	}

	return nil
}

// GetMeResponseMultiError is an error wrapping multiple validation errors
// returned by GetMeResponse.ValidateAll() if the designated constraints
// aren't met.
type GetMeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMeResponseMultiError) AllErrors() []error { return m }

// GetMeResponseValidationError is the validation error returned by
// GetMeResponse.Validate if the designated constraints aren't met.
type GetMeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMeResponseValidationError) ErrorName() string { return "GetMeResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetMeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMeResponseValidationError{}

// Validate checks the field values on UpdateMeRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateMeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateMeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateMeRequestMultiError, or nil if none found.
func (m *UpdateMeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateMeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateMeRequestValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateMeRequestValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateMeRequestValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateMeRequestMultiError(errors)
	}

	return nil
}

// UpdateMeRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateMeRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateMeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateMeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateMeRequestMultiError) AllErrors() []error { return m }

// UpdateMeRequestValidationError is the validation error returned by
// UpdateMeRequest.Validate if the designated constraints aren't met.
type UpdateMeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateMeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateMeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateMeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateMeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateMeRequestValidationError) ErrorName() string { return "UpdateMeRequestValidationError" }

// Error satisfies the builtin error interface
func (e UpdateMeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateMeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateMeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateMeRequestValidationError{}

// Validate checks the field values on UpdateMeResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateMeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateMeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateMeResponseMultiError, or nil if none found.
func (m *UpdateMeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateMeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateMeResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateMeResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateMeResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateMeResponseMultiError(errors)
	}

	return nil
}

// UpdateMeResponseMultiError is an error wrapping multiple validation errors
// returned by UpdateMeResponse.ValidateAll() if the designated constraints
// aren't met.
type UpdateMeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateMeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateMeResponseMultiError) AllErrors() []error { return m }

// UpdateMeResponseValidationError is the validation error returned by
// UpdateMeResponse.Validate if the designated constraints aren't met.
type UpdateMeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateMeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateMeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateMeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateMeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateMeResponseValidationError) ErrorName() string { return "UpdateMeResponseValidationError" }

// Error satisfies the builtin error interface
func (e UpdateMeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateMeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateMeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateMeResponseValidationError{}

// Validate checks the field values on DeleteMeRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteMeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteMeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteMeRequestMultiError, or nil if none found.
func (m *DeleteMeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteMeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteMeRequestMultiError(errors)
	}

	return nil
}

// DeleteMeRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteMeRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteMeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteMeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteMeRequestMultiError) AllErrors() []error { return m }

// DeleteMeRequestValidationError is the validation error returned by
// DeleteMeRequest.Validate if the designated constraints aren't met.
type DeleteMeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteMeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteMeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteMeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteMeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteMeRequestValidationError) ErrorName() string { return "DeleteMeRequestValidationError" }

// Error satisfies the builtin error interface
func (e DeleteMeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteMeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteMeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteMeRequestValidationError{}

// Validate checks the field values on DeleteMeResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteMeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteMeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteMeResponseMultiError, or nil if none found.
func (m *DeleteMeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteMeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteMeResponseMultiError(errors)
	}

	return nil
}

// DeleteMeResponseMultiError is an error wrapping multiple validation errors
// returned by DeleteMeResponse.ValidateAll() if the designated constraints
// aren't met.
type DeleteMeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteMeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteMeResponseMultiError) AllErrors() []error { return m }

// DeleteMeResponseValidationError is the validation error returned by
// DeleteMeResponse.Validate if the designated constraints aren't met.
type DeleteMeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteMeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteMeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteMeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteMeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteMeResponseValidationError) ErrorName() string { return "DeleteMeResponseValidationError" }

// Error satisfies the builtin error interface
func (e DeleteMeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteMeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteMeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteMeResponseValidationError{}

// Validate checks the field values on GetByIdRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetByIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetByIdRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetByIdRequestMultiError,
// or nil if none found.
func (m *GetByIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetByIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetByIdRequestMultiError(errors)
	}

	return nil
}

// GetByIdRequestMultiError is an error wrapping multiple validation errors
// returned by GetByIdRequest.ValidateAll() if the designated constraints
// aren't met.
type GetByIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetByIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetByIdRequestMultiError) AllErrors() []error { return m }

// GetByIdRequestValidationError is the validation error returned by
// GetByIdRequest.Validate if the designated constraints aren't met.
type GetByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetByIdRequestValidationError) ErrorName() string { return "GetByIdRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetByIdRequestValidationError{}

// Validate checks the field values on GetByIdResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetByIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetByIdResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetByIdResponseMultiError, or nil if none found.
func (m *GetByIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetByIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetByIdResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetByIdResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetByIdResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetByIdResponseMultiError(errors)
	}

	return nil
}

// GetByIdResponseMultiError is an error wrapping multiple validation errors
// returned by GetByIdResponse.ValidateAll() if the designated constraints
// aren't met.
type GetByIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetByIdResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetByIdResponseMultiError) AllErrors() []error { return m }

// GetByIdResponseValidationError is the validation error returned by
// GetByIdResponse.Validate if the designated constraints aren't met.
type GetByIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetByIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetByIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetByIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetByIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetByIdResponseValidationError) ErrorName() string { return "GetByIdResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetByIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetByIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetByIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetByIdResponseValidationError{}

// Validate checks the field values on GetByEmailRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetByEmailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetByEmailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetByEmailRequestMultiError, or nil if none found.
func (m *GetByEmailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetByEmailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Email

	if len(errors) > 0 {
		return GetByEmailRequestMultiError(errors)
	}

	return nil
}

// GetByEmailRequestMultiError is an error wrapping multiple validation errors
// returned by GetByEmailRequest.ValidateAll() if the designated constraints
// aren't met.
type GetByEmailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetByEmailRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetByEmailRequestMultiError) AllErrors() []error { return m }

// GetByEmailRequestValidationError is the validation error returned by
// GetByEmailRequest.Validate if the designated constraints aren't met.
type GetByEmailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetByEmailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetByEmailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetByEmailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetByEmailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetByEmailRequestValidationError) ErrorName() string {
	return "GetByEmailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetByEmailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetByEmailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetByEmailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetByEmailRequestValidationError{}

// Validate checks the field values on GetByEmailResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetByEmailResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetByEmailResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetByEmailResponseMultiError, or nil if none found.
func (m *GetByEmailResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetByEmailResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetByEmailResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetByEmailResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetByEmailResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetByEmailResponseMultiError(errors)
	}

	return nil
}

// GetByEmailResponseMultiError is an error wrapping multiple validation errors
// returned by GetByEmailResponse.ValidateAll() if the designated constraints
// aren't met.
type GetByEmailResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetByEmailResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetByEmailResponseMultiError) AllErrors() []error { return m }

// GetByEmailResponseValidationError is the validation error returned by
// GetByEmailResponse.Validate if the designated constraints aren't met.
type GetByEmailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetByEmailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetByEmailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetByEmailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetByEmailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetByEmailResponseValidationError) ErrorName() string {
	return "GetByEmailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetByEmailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetByEmailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetByEmailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetByEmailResponseValidationError{}

// Validate checks the field values on UpdateRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateRequestMultiError, or
// nil if none found.
func (m *UpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateRequestValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateRequestValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateRequestValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateRequestMultiError(errors)
	}

	return nil
}

// UpdateRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateRequestMultiError) AllErrors() []error { return m }

// UpdateRequestValidationError is the validation error returned by
// UpdateRequest.Validate if the designated constraints aren't met.
type UpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRequestValidationError) ErrorName() string { return "UpdateRequestValidationError" }

// Error satisfies the builtin error interface
func (e UpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRequestValidationError{}

// Validate checks the field values on UpdateResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateResponseMultiError,
// or nil if none found.
func (m *UpdateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateResponseMultiError(errors)
	}

	return nil
}

// UpdateResponseMultiError is an error wrapping multiple validation errors
// returned by UpdateResponse.ValidateAll() if the designated constraints
// aren't met.
type UpdateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateResponseMultiError) AllErrors() []error { return m }

// UpdateResponseValidationError is the validation error returned by
// UpdateResponse.Validate if the designated constraints aren't met.
type UpdateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateResponseValidationError) ErrorName() string { return "UpdateResponseValidationError" }

// Error satisfies the builtin error interface
func (e UpdateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateResponseValidationError{}

// Validate checks the field values on DeleteRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeleteRequestMultiError, or
// nil if none found.
func (m *DeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteRequestMultiError(errors)
	}

	return nil
}

// DeleteRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRequestMultiError) AllErrors() []error { return m }

// DeleteRequestValidationError is the validation error returned by
// DeleteRequest.Validate if the designated constraints aren't met.
type DeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRequestValidationError) ErrorName() string { return "DeleteRequestValidationError" }

// Error satisfies the builtin error interface
func (e DeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRequestValidationError{}

// Validate checks the field values on DeleteResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeleteResponseMultiError,
// or nil if none found.
func (m *DeleteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteResponseMultiError(errors)
	}

	return nil
}

// DeleteResponseMultiError is an error wrapping multiple validation errors
// returned by DeleteResponse.ValidateAll() if the designated constraints
// aren't met.
type DeleteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteResponseMultiError) AllErrors() []error { return m }

// DeleteResponseValidationError is the validation error returned by
// DeleteResponse.Validate if the designated constraints aren't met.
type DeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteResponseValidationError) ErrorName() string { return "DeleteResponseValidationError" }

// Error satisfies the builtin error interface
func (e DeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteResponseValidationError{}
