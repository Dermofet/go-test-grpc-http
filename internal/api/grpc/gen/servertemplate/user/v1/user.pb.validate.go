// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: servertemplate/user/v1/user.proto

package userv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on UserDB with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserDB) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserDB with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in UserDBMultiError, or nil if none found.
func (m *UserDB) ValidateAll() error {
	return m.validate(true)
}

func (m *UserDB) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for LastName

	// no validation rules for FirstName

	// no validation rules for SecondName

	// no validation rules for Age

	// no validation rules for Password

	// no validation rules for Email

	// no validation rules for Phone

	if len(errors) > 0 {
		return UserDBMultiError(errors)
	}

	return nil
}

// UserDBMultiError is an error wrapping multiple validation errors returned by
// UserDB.ValidateAll() if the designated constraints aren't met.
type UserDBMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserDBMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserDBMultiError) AllErrors() []error { return m }

// UserDBValidationError is the validation error returned by UserDB.Validate if
// the designated constraints aren't met.
type UserDBValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserDBValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserDBValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserDBValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserDBValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserDBValidationError) ErrorName() string { return "UserDBValidationError" }

// Error satisfies the builtin error interface
func (e UserDBValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserDB.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserDBValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserDBValidationError{}

// Validate checks the field values on UserCreate with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserCreate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserCreate with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserCreateMultiError, or
// nil if none found.
func (m *UserCreate) ValidateAll() error {
	return m.validate(true)
}

func (m *UserCreate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for LastName

	// no validation rules for FirstName

	// no validation rules for SecondName

	// no validation rules for Age

	// no validation rules for Password

	// no validation rules for Email

	// no validation rules for Phone

	if len(errors) > 0 {
		return UserCreateMultiError(errors)
	}

	return nil
}

// UserCreateMultiError is an error wrapping multiple validation errors
// returned by UserCreate.ValidateAll() if the designated constraints aren't met.
type UserCreateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserCreateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserCreateMultiError) AllErrors() []error { return m }

// UserCreateValidationError is the validation error returned by
// UserCreate.Validate if the designated constraints aren't met.
type UserCreateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserCreateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserCreateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserCreateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserCreateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserCreateValidationError) ErrorName() string { return "UserCreateValidationError" }

// Error satisfies the builtin error interface
func (e UserCreateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserCreate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserCreateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserCreateValidationError{}

// Validate checks the field values on UserUpdate with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserUpdate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserUpdate with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserUpdateMultiError, or
// nil if none found.
func (m *UserUpdate) ValidateAll() error {
	return m.validate(true)
}

func (m *UserUpdate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LastName

	// no validation rules for FirstName

	// no validation rules for SecondName

	// no validation rules for Age

	// no validation rules for Password

	// no validation rules for Email

	// no validation rules for Phone

	if len(errors) > 0 {
		return UserUpdateMultiError(errors)
	}

	return nil
}

// UserUpdateMultiError is an error wrapping multiple validation errors
// returned by UserUpdate.ValidateAll() if the designated constraints aren't met.
type UserUpdateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserUpdateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserUpdateMultiError) AllErrors() []error { return m }

// UserUpdateValidationError is the validation error returned by
// UserUpdate.Validate if the designated constraints aren't met.
type UserUpdateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserUpdateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserUpdateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserUpdateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserUpdateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserUpdateValidationError) ErrorName() string { return "UserUpdateValidationError" }

// Error satisfies the builtin error interface
func (e UserUpdateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserUpdate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserUpdateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserUpdateValidationError{}
